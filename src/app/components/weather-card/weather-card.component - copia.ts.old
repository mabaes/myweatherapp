import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { WeatherLocation } from '../../models/weather-location';
import { WeatherInfoService } from '../../services/weather-info.service';
import { WeatherInfo } from '../../models/weather-info';
import { Router } from '@angular/router';


////historial ////////
import { interval } from 'rxjs';
import { HistoricalInfo } from 'src/app/models/historical-info';
import { ConsoleReporter } from 'jasmine';

@Component({
  selector: 'app-weather-card',
  templateUrl: './weather-card.component.html',
  styleUrls: ['./weather-card.component.css']
})
export class WeatherCardComponent implements OnInit {

  @Input()
  private location: WeatherLocation;
  @Output()
  private removed = new EventEmitter();
  constructor(private weatherInfoService: WeatherInfoService, private router: Router) { }
  private info: WeatherInfo;

  ///////////// historical ///////////////
  //private  datosHistorico : HistoricalInfo[]=[];  
  //private infoData: WeatherInfo;
  //private iteminfo : WeatherInfo[]=[];
  //private itemHistorico: HistoricalInfo ;

  private datosHistorico : HistoricalInfo  = {};
  /////////// fin historical ///////////

  refresh() {
    console.log('[WeatherCardComponent] refresh()');
    
    this.weatherInfoService.findCurrentWeather(this.location, (err, info) => {
      this.info = info;
      /////////////// historico //////////////
      
      ///////////////////////////////////////
 
    });    
  }

  remove() {
    console.log('[WeatherCardComponent] remove()');
    this.removed.emit(this.location);
  }

  showDetails() {
    console.log('[WeatherCardComponent] showDetails()');
    this.router.navigateByUrl(`/details/${this.location.id}`);
  }
  showForecast() {
    console.log('[WeatherCardComponent] showForecast()');
    this.router.navigateByUrl(`/forecast/${this.location.id}`);
  }

  ngOnInit() {
    /*
    console.log('[WeatherCardComponent] ngOnInit()');
    this.weatherInfoService.findCurrentWeather(this.location, (err, info) => {
      this.info = info;
    });
    */
    //construir a mano el  modelo historico 
    /*
    this.infoData = {
      ts: Date.now(),
              desc: 'scattered clouds',
              icon: 'icono',
              temp: 12, //main.temp
              temp_max: 123, // main.temp_max
              temp_min: 33, // main.temp_min
              clouds: 22,
              humidity:  4,
              pressure:  2,
              wind: 33,
              dt_txt:'resul.dt_txt'
    }
    console.log('tamoaÃ±o de datoshistoria');
    if(this.datosHistorico.length>0){

    } else {
      this.iteminfo.push(this.info);
      this.itemHistorico =  {
          id: this.location.id,
          datainfo:this.iteminfo
       }
      this.datosHistorico.push(this.itemHistorico);
    }
    console.log('datos historico');
    console.log(this.datosHistorico);
    */
    /*
    console.log('resul indice a encontrar');
    console.log(this.datosHistorico);
    //console.log(this.datosHistorico.indexOf('2510764'));
    //let index = this.locations.findIndex((location => location.id === id_location));
    let index = this.datosHistorico.findIndex((id => this.location.id == 2510764));
    let objeto_add =  this.datosHistorico.find(x => x.id === 2510764);
    if (index!=-1) {
      console.log('add en datainfo');
    }
    */
    /*
    if (index!=-1) {
      this.datosHistorico
    }
    */
    //console.log(objeto_add);
    //console.log(Object.entries(objeto_add));
    /*
    
    for (let i = 0; i < 4; i++) { //items recibidos
      this.iteminfo.push(this.info);
    }    
    for (let i = 0; i < 6; i++) { //idlocation + items
      this.itemHistorico =  {
        id: i,
        datainfo:this.iteminfo
      }
      this.datosHistorico.push(this.itemHistorico);
    }
    */
    //console.log('CARD FINAL TEM INFO:');
    //console.log(this.datosHistorico);
    
    /////// fin array a mano

    console.log('[WeatherCardComponent] ngOnInit()');
    localStorage.removeItem('datosHistorico');

    /*
    this.infoData = {
      ts: Date.now(),
              desc: 'scattered clouds',
              icon: 'icono',
              temp: 12, //main.temp
              temp_max: 123, // main.temp_max
              temp_min: 33, // main.temp_min
              clouds: 22,
              humidity:  4,
              pressure:  2,
              wind: 33,
              dt_txt:'resul.dt_txt'
    }
    for (let i = 0; i < 4; i++) { //items recibidos
      this.iteminfo.push(this.infoData);
    } 
    */
    
    /* OK
    var obj_historical: HistoricalInfo = {
      0: { "ts": 0, "temp": 22 },
      1: { "ts": 1, "temp": 34 },
      2: { "ts": 2, "temp": 24 }
    };
    */
   /* OK 
  var obj_historical: HistoricalInfo = {
    0: [{ "ts": 0, "temp": 22 }, {"ts": 0, "temp": 22}],
    11: [{ "ts": 1, "temp": 34 }],
    332: [{ "ts": 2, "temp": 24 }]
   };
   */
  
  /*
   var obj_his : HistoricalInfo  = {};
  var arr_tmp = Array();
  for (let i = 0; i < 2; i++) { //idlocation + items
    arr_tmp.push({ "ts": i, "temp": i });
    obj_his[i] = arr_tmp
  }
  */
//console.log('obj_his');
//console.log(obj_his);
//console.log(typeof(obj_his));
///////////////////////////////////////////////////////////////////////
/*{  
  "list1" : [ "1", "2" ],
  "list2" : [ "a", "b" ],
  "list3" : [ { "key1" : "value1" }, { "key2" : "value2" } ],
  "not_a_list" : "11"
 };
 */
/*
// make an empty object
var myObject = {};

// set the "list1" property to an array of strings
myObject.list1 = ['1', '2'];

// you can also access properties by string
myObject['list2'] = [];
// accessing arrays is the same, but the keys are numbers
myObject.list2[0] = 'a';
myObject['list2'][1] = 'b';

myObject.list3 = [];
// instead of placing properties at specific indices, you
// can push them on to the end
myObject.list3.push({});
// or unshift them on to the beginning
myObject.list3.unshift({});
myObject.list3[0]['key1'] = 'value1';
myObject.list3[1]['key2'] = 'value2';

myObject.not_a_list = '11';
*/
///////////////////////////////////////////////////////////////////////
   
    //for (let i = 0; i < 2; i++) { //idlocation + items
      this.refresh();
    //}
    

    


  }

}
